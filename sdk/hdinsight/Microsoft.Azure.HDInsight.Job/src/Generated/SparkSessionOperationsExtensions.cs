// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.HDInsight.Job
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SparkSessionOperations.
    /// </summary>
    public static partial class SparkSessionOperationsExtensions
    {
            /// <summary>
            /// List all spark sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            public static SparkSessionCollection List(this ISparkSessionOperations operations, int? fromParameter = default(int?), int? size = default(int?))
            {
                return operations.ListAsync(fromParameter, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all spark sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkSessionCollection> ListAsync(this ISparkSessionOperations operations, int? fromParameter = default(int?), int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(fromParameter, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkSessionRequest'>
            /// Livy compatible session job request payload.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            public static SparkSessionJob Create(this ISparkSessionOperations operations, SparkSessionJobRequest sparkSessionRequest, string requestedBy = "admin")
            {
                return operations.CreateAsync(sparkSessionRequest, requestedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkSessionRequest'>
            /// Livy compatible session job request payload.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkSessionJob> CreateAsync(this ISparkSessionOperations operations, SparkSessionJobRequest sparkSessionRequest, string requestedBy = "admin", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(sparkSessionRequest, requestedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            public static SparkSessionJob Get(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.GetAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkSessionJob> GetAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a running spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            public static void Delete(this ISparkSessionOperations operations, int sessionId, string requestedBy = "admin")
            {
                operations.DeleteAsync(sessionId, requestedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a running spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISparkSessionOperations operations, int sessionId, string requestedBy = "admin", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(sessionId, requestedBy, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single spark session job logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            public static SparkJobLog GetLogs(this ISparkSessionOperations operations, int sessionId, int? fromParameter = default(int?), int? size = default(int?))
            {
                return operations.GetLogsAsync(sessionId, fromParameter, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark session job logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkJobLog> GetLogsAsync(this ISparkSessionOperations operations, int sessionId, int? fromParameter = default(int?), int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogsWithHttpMessagesAsync(sessionId, fromParameter, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single spark session job state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            public static SparkJobState GetState(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.GetStateAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark session job state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkJobState> GetStateAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStateWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of statements within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            public static SparkStatementCollection ListStatements(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.ListStatementsAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of statements within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkStatementCollection> ListStatementsAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatementsWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='sparkStatementRequest'>
            /// Livy compatible batch job request payload.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            public static SparkStatement CreateStatement(this ISparkSessionOperations operations, int sessionId, SparkStatementRequest sparkStatementRequest, string requestedBy = "admin")
            {
                return operations.CreateStatementAsync(sessionId, sparkStatementRequest, requestedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='sparkStatementRequest'>
            /// Livy compatible batch job request payload.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkStatement> CreateStatementAsync(this ISparkSessionOperations operations, int sessionId, SparkStatementRequest sparkStatementRequest, string requestedBy = "admin", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStatementWithHttpMessagesAsync(sessionId, sparkStatementRequest, requestedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            public static SparkStatement GetStatement(this ISparkSessionOperations operations, int sessionId, int statementId)
            {
                return operations.GetStatementAsync(sessionId, statementId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkStatement> GetStatementAsync(this ISparkSessionOperations operations, int sessionId, int statementId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementWithHttpMessagesAsync(sessionId, statementId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Kill a statement within a session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            public static SparkStatementCancellationResult DeleteStatement(this ISparkSessionOperations operations, int sessionId, int statementId, string requestedBy = "admin")
            {
                return operations.DeleteStatementAsync(sessionId, statementId, requestedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Kill a statement within a session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            /// <param name='requestedBy'>
            /// Add default vaule for X-Requested-By in header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkStatementCancellationResult> DeleteStatementAsync(this ISparkSessionOperations operations, int sessionId, int statementId, string requestedBy = "admin", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStatementWithHttpMessagesAsync(sessionId, statementId, requestedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
