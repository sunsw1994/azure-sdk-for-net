// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.HDInsight.Job
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SparkSessionOperations.
    /// </summary>
    public static partial class SparkSessionOperationsExtensions
    {
            /// <summary>
            /// List all spark sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            public static LivyListSessionResponse List(this ISparkSessionOperations operations, int? fromParameter = default(int?), int? size = default(int?))
            {
                return operations.ListAsync(fromParameter, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all spark sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyListSessionResponse> ListAsync(this ISparkSessionOperations operations, int? fromParameter = default(int?), int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(fromParameter, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='livyRequest'>
            /// Livy compatible session job request payload.
            /// </param>
            public static LivySessionResponse Create(this ISparkSessionOperations operations, string xRequestedBy, LivySessionRequest livyRequest)
            {
                return operations.CreateAsync(xRequestedBy, livyRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='livyRequest'>
            /// Livy compatible session job request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivySessionResponse> CreateAsync(this ISparkSessionOperations operations, string xRequestedBy, LivySessionRequest livyRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(xRequestedBy, livyRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            public static LivySessionResponse Get(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.GetAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivySessionResponse> GetAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a running spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            public static void Delete(this ISparkSessionOperations operations, string xRequestedBy, int sessionId)
            {
                operations.DeleteAsync(xRequestedBy, sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a running spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISparkSessionOperations operations, string xRequestedBy, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(xRequestedBy, sessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single spark batch job logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            public static LivyLogResponse GetLogs(this ISparkSessionOperations operations, int sessionId, int? fromParameter = default(int?), int? size = default(int?))
            {
                return operations.GetLogsAsync(sessionId, fromParameter, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark batch job logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyLogResponse> GetLogsAsync(this ISparkSessionOperations operations, int sessionId, int? fromParameter = default(int?), int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogsWithHttpMessagesAsync(sessionId, fromParameter, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single spark session job state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            public static LivyStateResponse GetState(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.GetStateAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark session job state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyStateResponse> GetStateAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStateWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of statements within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            public static LivyListStatementsResponse ListStatements(this ISparkSessionOperations operations, int sessionId)
            {
                return operations.ListStatementsAsync(sessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of statements within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyListStatementsResponse> ListStatementsAsync(this ISparkSessionOperations operations, int sessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatementsWithHttpMessagesAsync(sessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='livyRequest'>
            /// Livy compatible batch job request payload.
            /// </param>
            public static LivyStatementResponse CreateStatements(this ISparkSessionOperations operations, string xRequestedBy, int sessionId, LivyStatementRequest livyRequest)
            {
                return operations.CreateStatementsAsync(xRequestedBy, sessionId, livyRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='livyRequest'>
            /// Livy compatible batch job request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyStatementResponse> CreateStatementsAsync(this ISparkSessionOperations operations, string xRequestedBy, int sessionId, LivyStatementRequest livyRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStatementsWithHttpMessagesAsync(xRequestedBy, sessionId, livyRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            public static LivyStatementResponse GetStatements(this ISparkSessionOperations operations, int sessionId, int statementId)
            {
                return operations.GetStatementsAsync(sessionId, statementId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single statement within a spark session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyStatementResponse> GetStatementsAsync(this ISparkSessionOperations operations, int sessionId, int statementId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementsWithHttpMessagesAsync(sessionId, statementId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Kill a statement within a session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            public static LivyStatementCancellationResponse DeleteStatements(this ISparkSessionOperations operations, string xRequestedBy, int sessionId, int statementId)
            {
                return operations.DeleteStatementsAsync(xRequestedBy, sessionId, statementId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Kill a statement within a session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xRequestedBy'>
            /// </param>
            /// <param name='sessionId'>
            /// Identifier for the session.
            /// </param>
            /// <param name='statementId'>
            /// Identifier for the statement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LivyStatementCancellationResponse> DeleteStatementsAsync(this ISparkSessionOperations operations, string xRequestedBy, int sessionId, int statementId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStatementsWithHttpMessagesAsync(xRequestedBy, sessionId, statementId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
