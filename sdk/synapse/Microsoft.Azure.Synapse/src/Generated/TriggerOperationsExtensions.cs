// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TriggerOperations.
    /// </summary>
    public static partial class TriggerOperationsExtensions
    {
            /// <summary>
            /// Lists triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<TriggerResource> GetTriggersByWorkspace(this ITriggerOperations operations)
            {
                return operations.GetTriggersByWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggerResource>> GetTriggersByWorkspaceAsync(this ITriggerOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggersByWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='trigger'>
            /// Trigger resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the trigger entity.  Should only be specified for update, for which
            /// it should match existing entity or can be * for unconditional update.
            /// </param>
            public static TriggerResource CreateOrUpdateTrigger(this ITriggerOperations operations, string triggerName, TriggerResource trigger, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateTriggerAsync(triggerName, trigger, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='trigger'>
            /// Trigger resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the trigger entity.  Should only be specified for update, for which
            /// it should match existing entity or can be * for unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerResource> CreateOrUpdateTriggerAsync(this ITriggerOperations operations, string triggerName, TriggerResource trigger, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateTriggerWithHttpMessagesAsync(triggerName, trigger, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the trigger entity. Should only be specified for get. If the ETag
            /// matches the existing entity tag, or if * was provided, then no content will
            /// be returned.
            /// </param>
            public static TriggerResource GetTrigger(this ITriggerOperations operations, string triggerName, string ifNoneMatch = default(string))
            {
                return operations.GetTriggerAsync(triggerName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the trigger entity. Should only be specified for get. If the ETag
            /// matches the existing entity tag, or if * was provided, then no content will
            /// be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerResource> GetTriggerAsync(this ITriggerOperations operations, string triggerName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggerWithHttpMessagesAsync(triggerName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static void DeleteTrigger(this ITriggerOperations operations, string triggerName)
            {
                operations.DeleteTriggerAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTriggerAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTriggerWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Subscribe event trigger to events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static TriggerSubscriptionOperationStatus SubscribeTriggerToEvents(this ITriggerOperations operations, string triggerName)
            {
                return operations.SubscribeTriggerToEventsAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe event trigger to events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerSubscriptionOperationStatus> SubscribeTriggerToEventsAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeTriggerToEventsWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a trigger's event subscription status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static TriggerSubscriptionOperationStatus GetEventSubscriptionStatus(this ITriggerOperations operations, string triggerName)
            {
                return operations.GetEventSubscriptionStatusAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a trigger's event subscription status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerSubscriptionOperationStatus> GetEventSubscriptionStatusAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventSubscriptionStatusWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribe event trigger from events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static TriggerSubscriptionOperationStatus UnsubscribeTriggerFromEvents(this ITriggerOperations operations, string triggerName)
            {
                return operations.UnsubscribeTriggerFromEventsAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe event trigger from events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerSubscriptionOperationStatus> UnsubscribeTriggerFromEventsAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeTriggerFromEventsWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static void StartTrigger(this ITriggerOperations operations, string triggerName)
            {
                operations.StartTriggerAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartTriggerAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartTriggerWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static void StopTrigger(this ITriggerOperations operations, string triggerName)
            {
                operations.StopTriggerAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopTriggerAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopTriggerWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Subscribe event trigger to events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static TriggerSubscriptionOperationStatus BeginSubscribeTriggerToEvents(this ITriggerOperations operations, string triggerName)
            {
                return operations.BeginSubscribeTriggerToEventsAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe event trigger to events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerSubscriptionOperationStatus> BeginSubscribeTriggerToEventsAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSubscribeTriggerToEventsWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribe event trigger from events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static TriggerSubscriptionOperationStatus BeginUnsubscribeTriggerFromEvents(this ITriggerOperations operations, string triggerName)
            {
                return operations.BeginUnsubscribeTriggerFromEventsAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe event trigger from events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerSubscriptionOperationStatus> BeginUnsubscribeTriggerFromEventsAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUnsubscribeTriggerFromEventsWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static void BeginStartTrigger(this ITriggerOperations operations, string triggerName)
            {
                operations.BeginStartTriggerAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartTriggerAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartTriggerWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static void BeginStopTrigger(this ITriggerOperations operations, string triggerName)
            {
                operations.BeginStopTriggerAsync(triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopTriggerAsync(this ITriggerOperations operations, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopTriggerWithHttpMessagesAsync(triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<TriggerResource> GetTriggersByWorkspaceNext(this ITriggerOperations operations, string nextPageLink)
            {
                return operations.GetTriggersByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggerResource>> GetTriggersByWorkspaceNextAsync(this ITriggerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggersByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
