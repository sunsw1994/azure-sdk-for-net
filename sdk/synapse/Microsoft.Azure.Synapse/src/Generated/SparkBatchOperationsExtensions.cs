// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SparkBatchOperations.
    /// </summary>
    public static partial class SparkBatchOperationsExtensions
    {
            /// <summary>
            /// List all spark batch jobs which are running under a particular spark pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            public static SparkBatchJobCollection GetSparkBatchJobs(this ISparkBatchOperations operations, int? fromParameter = default(int?), int? size = default(int?), bool? detailed = default(bool?))
            {
                return operations.GetSparkBatchJobsAsync(fromParameter, size, detailed).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all spark batch jobs which are running under a particular spark pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional param specifying which index the list should begin from.
            /// </param>
            /// <param name='size'>
            /// Optional param specifying the size of the returned list.
            /// By default it is 20 and that is the maximum.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJobCollection> GetSparkBatchJobsAsync(this ISparkBatchOperations operations, int? fromParameter = default(int?), int? size = default(int?), bool? detailed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkBatchJobsWithHttpMessagesAsync(fromParameter, size, detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkBatchJobOptions'>
            /// Livy compatible batch job request payload.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            public static SparkBatchJob CreateSparkBatchJob(this ISparkBatchOperations operations, SparkBatchJobOptions sparkBatchJobOptions, bool? detailed = default(bool?))
            {
                return operations.CreateSparkBatchJobAsync(sparkBatchJobOptions, detailed).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkBatchJobOptions'>
            /// Livy compatible batch job request payload.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> CreateSparkBatchJobAsync(this ISparkBatchOperations operations, SparkBatchJobOptions sparkBatchJobOptions, bool? detailed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSparkBatchJobWithHttpMessagesAsync(sparkBatchJobOptions, detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// Identifier for the batch job.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            public static SparkBatchJob GetSparkBatchJob(this ISparkBatchOperations operations, int batchId, bool? detailed = default(bool?))
            {
                return operations.GetSparkBatchJobAsync(batchId, detailed).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// Identifier for the batch job.
            /// </param>
            /// <param name='detailed'>
            /// Optional query param specifying whether detailed response is returned
            /// beyond plain livy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> GetSparkBatchJobAsync(this ISparkBatchOperations operations, int batchId, bool? detailed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkBatchJobWithHttpMessagesAsync(batchId, detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a running spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// Identifier for the batch job.
            /// </param>
            public static void CancelSparkBatchJob(this ISparkBatchOperations operations, int batchId)
            {
                operations.CancelSparkBatchJobAsync(batchId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a running spark batch job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// Identifier for the batch job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelSparkBatchJobAsync(this ISparkBatchOperations operations, int batchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelSparkBatchJobWithHttpMessagesAsync(batchId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
