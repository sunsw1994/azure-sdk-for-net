// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlScriptOperations.
    /// </summary>
    public static partial class SqlScriptOperationsExtensions
    {
            /// <summary>
            /// Lists sql scripts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SqlScriptResource> GetSqlScriptsByWorkspace(this ISqlScriptOperations operations)
            {
                return operations.GetSqlScriptsByWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists sql scripts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlScriptResource>> GetSqlScriptsByWorkspaceAsync(this ISqlScriptOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlScriptsByWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Sql Script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            /// <param name='sqlScript'>
            /// Sql Script resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the SQL script entity.  Should only be specified for update, for
            /// which it should match existing entity or can be * for unconditional update.
            /// </param>
            public static SqlScriptResource CreateOrUpdateSqlScript(this ISqlScriptOperations operations, string sqlScriptName, SqlScriptResource sqlScript, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateSqlScriptAsync(sqlScriptName, sqlScript, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Sql Script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            /// <param name='sqlScript'>
            /// Sql Script resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the SQL script entity.  Should only be specified for update, for
            /// which it should match existing entity or can be * for unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlScriptResource> CreateOrUpdateSqlScriptAsync(this ISqlScriptOperations operations, string sqlScriptName, SqlScriptResource sqlScript, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSqlScriptWithHttpMessagesAsync(sqlScriptName, sqlScript, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a sql script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the sql compute entity. Should only be specified for get. If the
            /// ETag matches the existing entity tag, or if * was provided, then no content
            /// will be returned.
            /// </param>
            public static SqlScriptResource GetSqlScript(this ISqlScriptOperations operations, string sqlScriptName, string ifNoneMatch = default(string))
            {
                return operations.GetSqlScriptAsync(sqlScriptName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sql script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the sql compute entity. Should only be specified for get. If the
            /// ETag matches the existing entity tag, or if * was provided, then no content
            /// will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlScriptResource> GetSqlScriptAsync(this ISqlScriptOperations operations, string sqlScriptName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlScriptWithHttpMessagesAsync(sqlScriptName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Sql Script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            public static void DeleteSqlScript(this ISqlScriptOperations operations, string sqlScriptName)
            {
                operations.DeleteSqlScriptAsync(sqlScriptName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Sql Script.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sqlScriptName'>
            /// The sql script name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlScriptAsync(this ISqlScriptOperations operations, string sqlScriptName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlScriptWithHttpMessagesAsync(sqlScriptName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists sql scripts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlScriptResource> GetSqlScriptsByWorkspaceNext(this ISqlScriptOperations operations, string nextPageLink)
            {
                return operations.GetSqlScriptsByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists sql scripts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlScriptResource>> GetSqlScriptsByWorkspaceNextAsync(this ISqlScriptOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlScriptsByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
