// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Notebook root-level metadata.
    /// </summary>
    public partial class NotebookMetadata
    {
        /// <summary>
        /// Initializes a new instance of the NotebookMetadata class.
        /// </summary>
        public NotebookMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NotebookMetadata class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="kernelspec">Kernel information.</param>
        /// <param name="languageInfo">Language info.</param>
        public NotebookMetadata(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), NotebookKernelSpec kernelspec = default(NotebookKernelSpec), NotebookLanguageInfo languageInfo = default(NotebookLanguageInfo))
        {
            AdditionalProperties = additionalProperties;
            Kernelspec = kernelspec;
            LanguageInfo = languageInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets kernel information.
        /// </summary>
        [JsonProperty(PropertyName = "kernelspec")]
        public NotebookKernelSpec Kernelspec { get; set; }

        /// <summary>
        /// Gets or sets language info.
        /// </summary>
        [JsonProperty(PropertyName = "language_info")]
        public NotebookLanguageInfo LanguageInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kernelspec != null)
            {
                Kernelspec.Validate();
            }
            if (LanguageInfo != null)
            {
                LanguageInfo.Validate();
            }
        }
    }
}
