// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Response for batch list operation.
    /// </summary>
    public partial class SparkBatchJobCollection
    {
        /// <summary>
        /// Initializes a new instance of the SparkBatchJobCollection class.
        /// </summary>
        public SparkBatchJobCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkBatchJobCollection class.
        /// </summary>
        /// <param name="fromProperty">The start index of fetched
        /// sessions.</param>
        /// <param name="total">Number of sessions fetched.</param>
        /// <param name="sessions">Batch list</param>
        public SparkBatchJobCollection(int fromProperty, int total, IList<SparkBatchJob> sessions = default(IList<SparkBatchJob>))
        {
            FromProperty = fromProperty;
            Total = total;
            Sessions = sessions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the start index of fetched sessions.
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public int FromProperty { get; set; }

        /// <summary>
        /// Gets or sets number of sessions fetched.
        /// </summary>
        [JsonProperty(PropertyName = "total")]
        public int Total { get; set; }

        /// <summary>
        /// Gets or sets batch list
        /// </summary>
        [JsonProperty(PropertyName = "sessions")]
        public IList<SparkBatchJob> Sessions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sessions != null)
            {
                foreach (var element in Sessions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
