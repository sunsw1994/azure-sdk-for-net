// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Session properties.
    /// </summary>
    public partial class NotebookSessionProperties
    {
        /// <summary>
        /// Initializes a new instance of the NotebookSessionProperties class.
        /// </summary>
        public NotebookSessionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NotebookSessionProperties class.
        /// </summary>
        /// <param name="driverMemory">Amount of memory to use for the driver
        /// process.</param>
        /// <param name="driverCores">Number of cores to use for the
        /// driver.</param>
        /// <param name="executorMemory">Amount of memory to use per executor
        /// process.</param>
        /// <param name="executorCores">Number of cores to use for each
        /// executor.</param>
        /// <param name="numExecutors">Number of executors to launch for this
        /// session.</param>
        public NotebookSessionProperties(string driverMemory, int driverCores, string executorMemory, int executorCores, int numExecutors)
        {
            DriverMemory = driverMemory;
            DriverCores = driverCores;
            ExecutorMemory = executorMemory;
            ExecutorCores = executorCores;
            NumExecutors = numExecutors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets amount of memory to use for the driver process.
        /// </summary>
        [JsonProperty(PropertyName = "driverMemory")]
        public string DriverMemory { get; set; }

        /// <summary>
        /// Gets or sets number of cores to use for the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverCores")]
        public int DriverCores { get; set; }

        /// <summary>
        /// Gets or sets amount of memory to use per executor process.
        /// </summary>
        [JsonProperty(PropertyName = "executorMemory")]
        public string ExecutorMemory { get; set; }

        /// <summary>
        /// Gets or sets number of cores to use for each executor.
        /// </summary>
        [JsonProperty(PropertyName = "executorCores")]
        public int ExecutorCores { get; set; }

        /// <summary>
        /// Gets or sets number of executors to launch for this session.
        /// </summary>
        [JsonProperty(PropertyName = "numExecutors")]
        public int NumExecutors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DriverMemory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DriverMemory");
            }
            if (ExecutorMemory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExecutorMemory");
            }
        }
    }
}
