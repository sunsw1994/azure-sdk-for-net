// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Notebook cell.
    /// </summary>
    public partial class NotebookCell
    {
        /// <summary>
        /// Initializes a new instance of the NotebookCell class.
        /// </summary>
        public NotebookCell()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NotebookCell class.
        /// </summary>
        /// <param name="cellType">String identifying the type of cell.</param>
        /// <param name="metadata">Cell-level metadata.</param>
        /// <param name="source">Contents of the cell, represented as an array
        /// of lines.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="attachments">Attachments associated with the
        /// cell.</param>
        /// <param name="outputs">Cell-level output items.</param>
        public NotebookCell(string cellType, object metadata, IList<string> source, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), object attachments = default(object), IList<NotebookCellOutputItem> outputs = default(IList<NotebookCellOutputItem>))
        {
            AdditionalProperties = additionalProperties;
            CellType = cellType;
            Metadata = metadata;
            Source = source;
            Attachments = attachments;
            Outputs = outputs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets string identifying the type of cell.
        /// </summary>
        [JsonProperty(PropertyName = "cell_type")]
        public string CellType { get; set; }

        /// <summary>
        /// Gets or sets cell-level metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets or sets contents of the cell, represented as an array of
        /// lines.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public IList<string> Source { get; set; }

        /// <summary>
        /// Gets or sets attachments associated with the cell.
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public object Attachments { get; set; }

        /// <summary>
        /// Gets or sets cell-level output items.
        /// </summary>
        [JsonProperty(PropertyName = "outputs")]
        public IList<NotebookCellOutputItem> Outputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CellType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CellType");
            }
            if (Metadata == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Metadata");
            }
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Outputs != null)
            {
                foreach (var element in Outputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
