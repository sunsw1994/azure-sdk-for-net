// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request body structure for creating data flow debug session.
    /// </summary>
    public partial class CreateDataFlowDebugSessionRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateDataFlowDebugSessionRequest
        /// class.
        /// </summary>
        public CreateDataFlowDebugSessionRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateDataFlowDebugSessionRequest
        /// class.
        /// </summary>
        /// <param name="dataFlowName">The name of the data flow.</param>
        /// <param name="existingClusterId">The ID of existing Databricks
        /// cluster.</param>
        /// <param name="clusterTimeout">Timeout setting for Databricks
        /// cluster.</param>
        /// <param name="newClusterName">The name of new Databricks
        /// cluster.</param>
        /// <param name="newClusterNodeType">The type of new Databricks
        /// cluster.</param>
        /// <param name="dataBricksLinkedService">Data bricks linked
        /// service.</param>
        public CreateDataFlowDebugSessionRequest(string dataFlowName = default(string), string existingClusterId = default(string), int? clusterTimeout = default(int?), string newClusterName = default(string), string newClusterNodeType = default(string), LinkedServiceResource dataBricksLinkedService = default(LinkedServiceResource))
        {
            DataFlowName = dataFlowName;
            ExistingClusterId = existingClusterId;
            ClusterTimeout = clusterTimeout;
            NewClusterName = newClusterName;
            NewClusterNodeType = newClusterNodeType;
            DataBricksLinkedService = dataBricksLinkedService;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the data flow.
        /// </summary>
        [JsonProperty(PropertyName = "dataFlowName")]
        public string DataFlowName { get; set; }

        /// <summary>
        /// Gets or sets the ID of existing Databricks cluster.
        /// </summary>
        [JsonProperty(PropertyName = "existingClusterId")]
        public string ExistingClusterId { get; set; }

        /// <summary>
        /// Gets or sets timeout setting for Databricks cluster.
        /// </summary>
        [JsonProperty(PropertyName = "clusterTimeout")]
        public int? ClusterTimeout { get; set; }

        /// <summary>
        /// Gets or sets the name of new Databricks cluster.
        /// </summary>
        [JsonProperty(PropertyName = "newClusterName")]
        public string NewClusterName { get; set; }

        /// <summary>
        /// Gets or sets the type of new Databricks cluster.
        /// </summary>
        [JsonProperty(PropertyName = "newClusterNodeType")]
        public string NewClusterNodeType { get; set; }

        /// <summary>
        /// Gets or sets data bricks linked service.
        /// </summary>
        [JsonProperty(PropertyName = "dataBricksLinkedService")]
        public LinkedServiceResource DataBricksLinkedService { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataBricksLinkedService != null)
            {
                DataBricksLinkedService.Validate();
            }
        }
    }
}
