// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SparkBatchJob
    {
        /// <summary>
        /// Initializes a new instance of the SparkBatchJob class.
        /// </summary>
        public SparkBatchJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkBatchJob class.
        /// </summary>
        /// <param name="id">The session Id.</param>
        /// <param name="name">The batch name.</param>
        /// <param name="workspaceName">The workspace name.</param>
        /// <param name="sparkPoolName">The Spark pool name.</param>
        /// <param name="submitterName">The submitter name.</param>
        /// <param name="submitterId">The submitter identifier.</param>
        /// <param name="artifactId">The artifact identifier.</param>
        /// <param name="jobType">The job type. Possible values include:
        /// 'SparkBatch', 'SparkSession'</param>
        /// <param name="result">The Spark batch job result. Possible values
        /// include: 'Uncertain', 'Succeeded', 'Failed', 'Cancelled'</param>
        /// <param name="scheduler">The scheduler information.</param>
        /// <param name="plugin">The plugin information.</param>
        /// <param name="errors">The error information.</param>
        /// <param name="tags">The tags.</param>
        /// <param name="appId">The application id of this session</param>
        /// <param name="appInfo">The detailed application info.</param>
        /// <param name="state">The batch state</param>
        /// <param name="logLines">The log lines.</param>
        public SparkBatchJob(int id, SparkBatchJobState livyInfo = default(SparkBatchJobState), string name = default(string), string workspaceName = default(string), string sparkPoolName = default(string), string submitterName = default(string), string submitterId = default(string), string artifactId = default(string), string jobType = default(string), string result = default(string), SparkScheduler scheduler = default(SparkScheduler), SparkServicePlugin plugin = default(SparkServicePlugin), IList<SparkServiceError> errors = default(IList<SparkServiceError>), IDictionary<string, string> tags = default(IDictionary<string, string>), string appId = default(string), IDictionary<string, string> appInfo = default(IDictionary<string, string>), string state = default(string), IList<string> logLines = default(IList<string>))
        {
            LivyInfo = livyInfo;
            Name = name;
            WorkspaceName = workspaceName;
            SparkPoolName = sparkPoolName;
            SubmitterName = submitterName;
            SubmitterId = submitterId;
            ArtifactId = artifactId;
            JobType = jobType;
            Result = result;
            Scheduler = scheduler;
            Plugin = plugin;
            Errors = errors;
            Tags = tags;
            Id = id;
            AppId = appId;
            AppInfo = appInfo;
            State = state;
            LogLines = logLines;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "livyInfo")]
        public SparkBatchJobState LivyInfo { get; set; }

        /// <summary>
        /// Gets or sets the batch name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the workspace name.
        /// </summary>
        [JsonProperty(PropertyName = "workspaceName")]
        public string WorkspaceName { get; set; }

        /// <summary>
        /// Gets or sets the Spark pool name.
        /// </summary>
        [JsonProperty(PropertyName = "sparkPoolName")]
        public string SparkPoolName { get; set; }

        /// <summary>
        /// Gets or sets the submitter name.
        /// </summary>
        [JsonProperty(PropertyName = "submitterName")]
        public string SubmitterName { get; set; }

        /// <summary>
        /// Gets or sets the submitter identifier.
        /// </summary>
        [JsonProperty(PropertyName = "submitterId")]
        public string SubmitterId { get; set; }

        /// <summary>
        /// Gets or sets the artifact identifier.
        /// </summary>
        [JsonProperty(PropertyName = "artifactId")]
        public string ArtifactId { get; set; }

        /// <summary>
        /// Gets or sets the job type. Possible values include: 'SparkBatch',
        /// 'SparkSession'
        /// </summary>
        [JsonProperty(PropertyName = "jobType")]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or sets the Spark batch job result. Possible values include:
        /// 'Uncertain', 'Succeeded', 'Failed', 'Cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public string Result { get; set; }

        /// <summary>
        /// Gets or sets the scheduler information.
        /// </summary>
        [JsonProperty(PropertyName = "schedulerInfo")]
        public SparkScheduler Scheduler { get; set; }

        /// <summary>
        /// Gets or sets the plugin information.
        /// </summary>
        [JsonProperty(PropertyName = "pluginInfo")]
        public SparkServicePlugin Plugin { get; set; }

        /// <summary>
        /// Gets or sets the error information.
        /// </summary>
        [JsonProperty(PropertyName = "errorInfo")]
        public IList<SparkServiceError> Errors { get; set; }

        /// <summary>
        /// Gets or sets the tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the session Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the application id of this session
        /// </summary>
        [JsonProperty(PropertyName = "appId")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets the detailed application info.
        /// </summary>
        [JsonProperty(PropertyName = "appInfo")]
        public IDictionary<string, string> AppInfo { get; set; }

        /// <summary>
        /// Gets or sets the batch state
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the log lines.
        /// </summary>
        [JsonProperty(PropertyName = "log")]
        public IList<string> LogLines { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
