// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Synapse role details
    /// </summary>
    public partial class SynapseRole
    {
        /// <summary>
        /// Initializes a new instance of the SynapseRole class.
        /// </summary>
        public SynapseRole()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseRole class.
        /// </summary>
        /// <param name="isBuiltIn">Is a built-in role or not</param>
        /// <param name="id">Role ID</param>
        /// <param name="name">Name of the Synapse role</param>
        public SynapseRole(bool isBuiltIn, string id = default(string), string name = default(string))
        {
            Id = id;
            Name = name;
            IsBuiltIn = isBuiltIn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets role ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets name of the Synapse role
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets is a built-in role or not
        /// </summary>
        [JsonProperty(PropertyName = "isBuiltIn")]
        public bool IsBuiltIn { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
