// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Spark job definition.
    /// </summary>
    public partial class SparkJobDefinition
    {
        /// <summary>
        /// Initializes a new instance of the SparkJobDefinition class.
        /// </summary>
        public SparkJobDefinition()
        {
            TargetBigDataPool = new BigDataPoolReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkJobDefinition class.
        /// </summary>
        /// <param name="targetBigDataPool">Big data pool reference.</param>
        /// <param name="jobProperties">The properties of the Spark
        /// job.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">The description of the Spark job
        /// definition.</param>
        /// <param name="requiredSparkVersion">The required Spark version of
        /// the application.</param>
        /// <param name="language">The language of the Spark
        /// application.</param>
        public SparkJobDefinition(BigDataPoolReference targetBigDataPool, SparkJobProperties jobProperties, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), string requiredSparkVersion = default(string), string language = default(string))
        {
            AdditionalProperties = additionalProperties;
            Description = description;
            TargetBigDataPool = targetBigDataPool;
            RequiredSparkVersion = requiredSparkVersion;
            Language = language;
            JobProperties = jobProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the description of the Spark job definition.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets big data pool reference.
        /// </summary>
        [JsonProperty(PropertyName = "targetBigDataPool")]
        public BigDataPoolReference TargetBigDataPool { get; set; }

        /// <summary>
        /// Gets or sets the required Spark version of the application.
        /// </summary>
        [JsonProperty(PropertyName = "requiredSparkVersion")]
        public string RequiredSparkVersion { get; set; }

        /// <summary>
        /// Gets or sets the language of the Spark application.
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the properties of the Spark job.
        /// </summary>
        [JsonProperty(PropertyName = "jobProperties")]
        public SparkJobProperties JobProperties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetBigDataPool == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetBigDataPool");
            }
            if (JobProperties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JobProperties");
            }
            if (TargetBigDataPool != null)
            {
                TargetBigDataPool.Validate();
            }
            if (JobProperties != null)
            {
                JobProperties.Validate();
            }
        }
    }
}
