// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of the Spark job.
    /// </summary>
    public partial class SparkJobProperties
    {
        /// <summary>
        /// Initializes a new instance of the SparkJobProperties class.
        /// </summary>
        public SparkJobProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkJobProperties class.
        /// </summary>
        /// <param name="file">File containing the application to
        /// execute.</param>
        /// <param name="driverMemory">Amount of memory to use for the driver
        /// process.</param>
        /// <param name="driverCores">Number of cores to use for the
        /// driver.</param>
        /// <param name="executorMemory">Amount of memory to use per executor
        /// process.</param>
        /// <param name="executorCores">Number of cores to use for each
        /// executor.</param>
        /// <param name="numExecutors">Number of executors to launch for this
        /// job.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="name">The name of the job.</param>
        /// <param name="className">Main class for Java/Scala
        /// application.</param>
        /// <param name="conf">Spark configuration properties.</param>
        /// <param name="args">Command line arguments for the
        /// application.</param>
        /// <param name="jars">Jars to be used in this job.</param>
        /// <param name="files">files to be used in this job.</param>
        /// <param name="archives">Archives to be used in this job.</param>
        public SparkJobProperties(string file, string driverMemory, int driverCores, string executorMemory, int executorCores, int numExecutors, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string name = default(string), string className = default(string), object conf = default(object), IList<string> args = default(IList<string>), IList<string> jars = default(IList<string>), IList<string> files = default(IList<string>), IList<string> archives = default(IList<string>))
        {
            AdditionalProperties = additionalProperties;
            Name = name;
            File = file;
            ClassName = className;
            Conf = conf;
            Args = args;
            Jars = jars;
            Files = files;
            Archives = archives;
            DriverMemory = driverMemory;
            DriverCores = driverCores;
            ExecutorMemory = executorMemory;
            ExecutorCores = executorCores;
            NumExecutors = numExecutors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the name of the job.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets file containing the application to execute.
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Gets or sets main class for Java/Scala application.
        /// </summary>
        [JsonProperty(PropertyName = "className")]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or sets spark configuration properties.
        /// </summary>
        [JsonProperty(PropertyName = "conf")]
        public object Conf { get; set; }

        /// <summary>
        /// Gets or sets command line arguments for the application.
        /// </summary>
        [JsonProperty(PropertyName = "args")]
        public IList<string> Args { get; set; }

        /// <summary>
        /// Gets or sets jars to be used in this job.
        /// </summary>
        [JsonProperty(PropertyName = "jars")]
        public IList<string> Jars { get; set; }

        /// <summary>
        /// Gets or sets files to be used in this job.
        /// </summary>
        [JsonProperty(PropertyName = "files")]
        public IList<string> Files { get; set; }

        /// <summary>
        /// Gets or sets archives to be used in this job.
        /// </summary>
        [JsonProperty(PropertyName = "archives")]
        public IList<string> Archives { get; set; }

        /// <summary>
        /// Gets or sets amount of memory to use for the driver process.
        /// </summary>
        [JsonProperty(PropertyName = "driverMemory")]
        public string DriverMemory { get; set; }

        /// <summary>
        /// Gets or sets number of cores to use for the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverCores")]
        public int DriverCores { get; set; }

        /// <summary>
        /// Gets or sets amount of memory to use per executor process.
        /// </summary>
        [JsonProperty(PropertyName = "executorMemory")]
        public string ExecutorMemory { get; set; }

        /// <summary>
        /// Gets or sets number of cores to use for each executor.
        /// </summary>
        [JsonProperty(PropertyName = "executorCores")]
        public int ExecutorCores { get; set; }

        /// <summary>
        /// Gets or sets number of executors to launch for this job.
        /// </summary>
        [JsonProperty(PropertyName = "numExecutors")]
        public int NumExecutors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (File == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "File");
            }
            if (DriverMemory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DriverMemory");
            }
            if (ExecutorMemory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExecutorMemory");
            }
        }
    }
}
