// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The content of the SQL script.
    /// </summary>
    public partial class SqlScriptContent
    {
        /// <summary>
        /// Initializes a new instance of the SqlScriptContent class.
        /// </summary>
        public SqlScriptContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlScriptContent class.
        /// </summary>
        /// <param name="query">SQL query to execute.</param>
        /// <param name="currentConnection">The connection used to execute the
        /// SQL script.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="metadata">The metadata of the SQL script.</param>
        public SqlScriptContent(string query, SqlConnection currentConnection, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), SqlScriptMetadata metadata = default(SqlScriptMetadata))
        {
            AdditionalProperties = additionalProperties;
            Query = query;
            CurrentConnection = currentConnection;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets SQL query to execute.
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets the connection used to execute the SQL script.
        /// </summary>
        [JsonProperty(PropertyName = "currentConnection")]
        public SqlConnection CurrentConnection { get; set; }

        /// <summary>
        /// Gets or sets the metadata of the SQL script.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public SqlScriptMetadata Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Query == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Query");
            }
            if (CurrentConnection == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CurrentConnection");
            }
            if (CurrentConnection != null)
            {
                CurrentConnection.Validate();
            }
        }
    }
}
