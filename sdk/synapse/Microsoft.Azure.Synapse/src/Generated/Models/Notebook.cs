// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Notebook.
    /// </summary>
    public partial class Notebook
    {
        /// <summary>
        /// Initializes a new instance of the Notebook class.
        /// </summary>
        public Notebook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Notebook class.
        /// </summary>
        /// <param name="metadata">Notebook root-level metadata.</param>
        /// <param name="nbformat">Notebook format (major number). Incremented
        /// between backwards incompatible changes to the notebook
        /// format.</param>
        /// <param name="nbformatMinor">Notebook format (minor number).
        /// Incremented for backward compatible changes to the notebook
        /// format.</param>
        /// <param name="cells">Array of cells of the current notebook.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">The description of the notebook.</param>
        /// <param name="bigDataPool">Big data pool reference.</param>
        /// <param name="sessionProperties">Session properties.</param>
        public Notebook(NotebookMetadata metadata, int nbformat, int nbformatMinor, IList<NotebookCell> cells, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), BigDataPoolReference bigDataPool = default(BigDataPoolReference), NotebookSessionProperties sessionProperties = default(NotebookSessionProperties))
        {
            AdditionalProperties = additionalProperties;
            Description = description;
            BigDataPool = bigDataPool;
            SessionProperties = sessionProperties;
            Metadata = metadata;
            Nbformat = nbformat;
            NbformatMinor = nbformatMinor;
            Cells = cells;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the description of the notebook.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets big data pool reference.
        /// </summary>
        [JsonProperty(PropertyName = "bigDataPool")]
        public BigDataPoolReference BigDataPool { get; set; }

        /// <summary>
        /// Gets or sets session properties.
        /// </summary>
        [JsonProperty(PropertyName = "sessionProperties")]
        public NotebookSessionProperties SessionProperties { get; set; }

        /// <summary>
        /// Gets or sets notebook root-level metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public NotebookMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or sets notebook format (major number). Incremented between
        /// backwards incompatible changes to the notebook format.
        /// </summary>
        [JsonProperty(PropertyName = "nbformat")]
        public int Nbformat { get; set; }

        /// <summary>
        /// Gets or sets notebook format (minor number). Incremented for
        /// backward compatible changes to the notebook format.
        /// </summary>
        [JsonProperty(PropertyName = "nbformat_minor")]
        public int NbformatMinor { get; set; }

        /// <summary>
        /// Gets or sets array of cells of the current notebook.
        /// </summary>
        [JsonProperty(PropertyName = "cells")]
        public IList<NotebookCell> Cells { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Metadata == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Metadata");
            }
            if (Cells == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Cells");
            }
            if (BigDataPool != null)
            {
                BigDataPool.Validate();
            }
            if (SessionProperties != null)
            {
                SessionProperties.Validate();
            }
            if (Metadata != null)
            {
                Metadata.Validate();
            }
            if (Cells != null)
            {
                foreach (var element in Cells)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
