// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    public partial class ArtifactsClient : ServiceClient<ArtifactsClient>, IArtifactsClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        internal string BaseUri {get; set;}

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The Synapse client API Version.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The workspace development endpoint, for example
        /// https://myworkspace.dev.azuresynapse.net.
        /// </summary>
        public string Endpoint { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the ILinkedServiceOperations.
        /// </summary>
        public virtual ILinkedServiceOperations LinkedService { get; private set; }

        /// <summary>
        /// Gets the IDatasetOperations.
        /// </summary>
        public virtual IDatasetOperations Dataset { get; private set; }

        /// <summary>
        /// Gets the IPipelineOperations.
        /// </summary>
        public virtual IPipelineOperations Pipeline { get; private set; }

        /// <summary>
        /// Gets the IPipelineRunOperations.
        /// </summary>
        public virtual IPipelineRunOperations PipelineRun { get; private set; }

        /// <summary>
        /// Gets the ITriggerOperations.
        /// </summary>
        public virtual ITriggerOperations Trigger { get; private set; }

        /// <summary>
        /// Gets the ITriggerRunOperations.
        /// </summary>
        public virtual ITriggerRunOperations TriggerRun { get; private set; }

        /// <summary>
        /// Gets the IDataFlowOperations.
        /// </summary>
        public virtual IDataFlowOperations DataFlow { get; private set; }

        /// <summary>
        /// Gets the IDataFlowDebugSessionOperations.
        /// </summary>
        public virtual IDataFlowDebugSessionOperations DataFlowDebugSession { get; private set; }

        /// <summary>
        /// Gets the ISqlScriptOperations.
        /// </summary>
        public virtual ISqlScriptOperations SqlScript { get; private set; }

        /// <summary>
        /// Gets the ISparkJobDefinitionOperations.
        /// </summary>
        public virtual ISparkJobDefinitionOperations SparkJobDefinition { get; private set; }

        /// <summary>
        /// Gets the INotebookOperations.
        /// </summary>
        public virtual INotebookOperations Notebook { get; private set; }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ArtifactsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected ArtifactsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ArtifactsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ArtifactsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ArtifactsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ArtifactsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ArtifactsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ArtifactsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            LinkedService = new LinkedServiceOperations(this);
            Dataset = new DatasetOperations(this);
            Pipeline = new PipelineOperations(this);
            PipelineRun = new PipelineRunOperations(this);
            Trigger = new TriggerOperations(this);
            TriggerRun = new TriggerRunOperations(this);
            DataFlow = new DataFlowOperations(this);
            DataFlowDebugSession = new DataFlowDebugSessionOperations(this);
            SqlScript = new SqlScriptOperations(this);
            SparkJobDefinition = new SparkJobDefinitionOperations(this);
            Notebook = new NotebookOperations(this);
            BaseUri = "{endpoint}";
            ApiVersion = "2019-06-01-preview";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<SecretBase>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<SecretBase>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<LinkedService>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<LinkedService>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Dataset>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Dataset>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Activity>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Activity>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Trigger>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Trigger>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DataFlow>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DataFlow>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DependencyReference>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DependencyReference>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<WebLinkedServiceTypeProperties>("authenticationType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<WebLinkedServiceTypeProperties>("authenticationType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DatasetCompression>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DatasetCompression>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DatasetLocation>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DatasetLocation>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<StoreReadSettings>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<StoreReadSettings>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FormatReadSettings>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FormatReadSettings>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CopySource>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CopySource>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<StoreWriteSettings>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<StoreWriteSettings>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FormatWriteSettings>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FormatWriteSettings>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CopySink>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CopySink>("type"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
