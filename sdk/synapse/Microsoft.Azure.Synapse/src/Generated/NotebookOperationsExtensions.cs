// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NotebookOperations.
    /// </summary>
    public static partial class NotebookOperationsExtensions
    {
            /// <summary>
            /// Lists Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<NotebookResource> GetNotebooksByWorkspace(this INotebookOperations operations)
            {
                return operations.GetNotebooksByWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NotebookResource>> GetNotebooksByWorkspaceAsync(this INotebookOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotebooksByWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists a summary of Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<NotebookResource> GetNotebookSummaryByWorkSpace(this INotebookOperations operations)
            {
                return operations.GetNotebookSummaryByWorkSpaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a summary of Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NotebookResource>> GetNotebookSummaryByWorkSpaceAsync(this INotebookOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotebookSummaryByWorkSpaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Note Book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            /// <param name='notebook'>
            /// Note book resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Note book entity.  Should only be specified for update, for
            /// which it should match existing entity or can be * for unconditional update.
            /// </param>
            public static NotebookResource CreateOrUpdateNotebook(this INotebookOperations operations, string notebookName, NotebookResource notebook, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateNotebookAsync(notebookName, notebook, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Note Book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            /// <param name='notebook'>
            /// Note book resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Note book entity.  Should only be specified for update, for
            /// which it should match existing entity or can be * for unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotebookResource> CreateOrUpdateNotebookAsync(this INotebookOperations operations, string notebookName, NotebookResource notebook, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateNotebookWithHttpMessagesAsync(notebookName, notebook, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Note Book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the Notebook entity. Should only be specified for get. If the ETag
            /// matches the existing entity tag, or if * was provided, then no content will
            /// be returned.
            /// </param>
            public static NotebookResource GetNotebook(this INotebookOperations operations, string notebookName, string ifNoneMatch = default(string))
            {
                return operations.GetNotebookAsync(notebookName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Note Book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the Notebook entity. Should only be specified for get. If the ETag
            /// matches the existing entity tag, or if * was provided, then no content will
            /// be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotebookResource> GetNotebookAsync(this INotebookOperations operations, string notebookName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotebookWithHttpMessagesAsync(notebookName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Note book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            public static void DeleteNotebook(this INotebookOperations operations, string notebookName)
            {
                operations.DeleteNotebookAsync(notebookName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Note book.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notebookName'>
            /// The notebook name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNotebookAsync(this INotebookOperations operations, string notebookName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNotebookWithHttpMessagesAsync(notebookName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NotebookResource> GetNotebooksByWorkspaceNext(this INotebookOperations operations, string nextPageLink)
            {
                return operations.GetNotebooksByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NotebookResource>> GetNotebooksByWorkspaceNextAsync(this INotebookOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotebooksByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists a summary of Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NotebookResource> GetNotebookSummaryByWorkSpaceNext(this INotebookOperations operations, string nextPageLink)
            {
                return operations.GetNotebookSummaryByWorkSpaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a summary of Notebooks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NotebookResource>> GetNotebookSummaryByWorkSpaceNextAsync(this INotebookOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotebookSummaryByWorkSpaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
