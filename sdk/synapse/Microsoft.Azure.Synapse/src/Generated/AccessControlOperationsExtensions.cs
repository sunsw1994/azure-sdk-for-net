// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessControlOperations.
    /// </summary>
    public static partial class AccessControlOperationsExtensions
    {
            /// <summary>
            /// List roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SynapseRole> GetRoleDefinitions(this IAccessControlOperations operations)
            {
                return operations.GetRoleDefinitionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SynapseRole>> GetRoleDefinitionsAsync(this IAccessControlOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleDefinitionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role by role Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// Synapse Built-In Role Id.
            /// </param>
            public static SynapseRole GetRoleDefinitionById(this IAccessControlOperations operations, string roleId)
            {
                return operations.GetRoleDefinitionByIdAsync(roleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role by role Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// Synapse Built-In Role Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SynapseRole> GetRoleDefinitionByIdAsync(this IAccessControlOperations operations, string roleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleDefinitionByIdWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create role assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createRoleAssignmentOptions'>
            /// Details of role id and object id.
            /// </param>
            public static RoleAssignmentDetails CreateRoleAssignment(this IAccessControlOperations operations, RoleAssignmentOptions createRoleAssignmentOptions)
            {
                return operations.CreateRoleAssignmentAsync(createRoleAssignmentOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create role assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createRoleAssignmentOptions'>
            /// Details of role id and object id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentDetails> CreateRoleAssignmentAsync(this IAccessControlOperations operations, RoleAssignmentOptions createRoleAssignmentOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRoleAssignmentWithHttpMessagesAsync(createRoleAssignmentOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List role assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// Synapse Built-In Role Id.
            /// </param>
            /// <param name='principalId'>
            /// Object ID of the AAD principal or security-group.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token.
            /// </param>
            public static IList<RoleAssignmentDetails> GetRoleAssignments(this IAccessControlOperations operations, string roleId = default(string), string principalId = default(string), string continuationToken = default(string))
            {
                return operations.GetRoleAssignmentsAsync(roleId, principalId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List role assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// Synapse Built-In Role Id.
            /// </param>
            /// <param name='principalId'>
            /// Object ID of the AAD principal or security-group.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleAssignmentDetails>> GetRoleAssignmentsAsync(this IAccessControlOperations operations, string roleId = default(string), string principalId = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleAssignmentsWithHttpMessagesAsync(roleId, principalId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role assignment by role assignment Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The ID of the role assignment.
            /// </param>
            public static RoleAssignmentDetails GetRoleAssignmentById(this IAccessControlOperations operations, string roleAssignmentId)
            {
                return operations.GetRoleAssignmentByIdAsync(roleAssignmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role assignment by role assignment Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The ID of the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentDetails> GetRoleAssignmentByIdAsync(this IAccessControlOperations operations, string roleAssignmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleAssignmentByIdWithHttpMessagesAsync(roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete role assignment by role assignment Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The ID of the role assignment.
            /// </param>
            public static void DeleteRoleAssignmentById(this IAccessControlOperations operations, string roleAssignmentId)
            {
                operations.DeleteRoleAssignmentByIdAsync(roleAssignmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete role assignment by role assignment Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The ID of the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRoleAssignmentByIdAsync(this IAccessControlOperations operations, string roleAssignmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRoleAssignmentByIdWithHttpMessagesAsync(roleAssignmentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List role assignments of the caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetCallerRoleAssignments(this IAccessControlOperations operations)
            {
                return operations.GetCallerRoleAssignmentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List role assignments of the caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetCallerRoleAssignmentsAsync(this IAccessControlOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCallerRoleAssignmentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SynapseRole> GetRoleDefinitionsNext(this IAccessControlOperations operations, string nextPageLink)
            {
                return operations.GetRoleDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SynapseRole>> GetRoleDefinitionsNextAsync(this IAccessControlOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
