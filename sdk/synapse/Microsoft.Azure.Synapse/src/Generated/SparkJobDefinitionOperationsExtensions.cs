// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SparkJobDefinitionOperations.
    /// </summary>
    public static partial class SparkJobDefinitionOperationsExtensions
    {
            /// <summary>
            /// Lists spark job definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SparkJobDefinitionResource> GetSparkJobDefinitionsByWorkspace(this ISparkJobDefinitionOperations operations)
            {
                return operations.GetSparkJobDefinitionsByWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists spark job definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SparkJobDefinitionResource>> GetSparkJobDefinitionsByWorkspaceAsync(this ISparkJobDefinitionOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkJobDefinitionsByWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='sparkJobDefinition'>
            /// Spark Job Definition resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Spark Job Definition entity.  Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            public static SparkJobDefinitionResource CreateOrUpdateSparkJobDefinition(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, SparkJobDefinitionResource sparkJobDefinition, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateSparkJobDefinitionAsync(sparkJobDefinitionName, sparkJobDefinition, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='sparkJobDefinition'>
            /// Spark Job Definition resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Spark Job Definition entity.  Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkJobDefinitionResource> CreateOrUpdateSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, SparkJobDefinitionResource sparkJobDefinition, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionName, sparkJobDefinition, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the Spark Job Definition entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            public static SparkJobDefinitionResource GetSparkJobDefinition(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, string ifNoneMatch = default(string))
            {
                return operations.GetSparkJobDefinitionAsync(sparkJobDefinitionName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the Spark Job Definition entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkJobDefinitionResource> GetSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            public static void DeleteSparkJobDefinition(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName)
            {
                operations.DeleteSparkJobDefinitionAsync(sparkJobDefinitionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Spark Job Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Executes the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            public static SparkBatchJob ExecuteSparkJobDefinition(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName)
            {
                return operations.ExecuteSparkJobDefinitionAsync(sparkJobDefinitionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> ExecuteSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Debug the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionAzureResource'>
            /// Spark Job Definition resource definition.
            /// </param>
            public static SparkBatchJob DebugSparkJobDefinition(this ISparkJobDefinitionOperations operations, SparkJobDefinitionResource sparkJobDefinitionAzureResource)
            {
                return operations.DebugSparkJobDefinitionAsync(sparkJobDefinitionAzureResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Debug the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionAzureResource'>
            /// Spark Job Definition resource definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> DebugSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, SparkJobDefinitionResource sparkJobDefinitionAzureResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DebugSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionAzureResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            public static SparkBatchJob BeginExecuteSparkJobDefinition(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName)
            {
                return operations.BeginExecuteSparkJobDefinitionAsync(sparkJobDefinitionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionName'>
            /// The spark job definition name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> BeginExecuteSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, string sparkJobDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginExecuteSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Debug the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionAzureResource'>
            /// Spark Job Definition resource definition.
            /// </param>
            public static SparkBatchJob BeginDebugSparkJobDefinition(this ISparkJobDefinitionOperations operations, SparkJobDefinitionResource sparkJobDefinitionAzureResource)
            {
                return operations.BeginDebugSparkJobDefinitionAsync(sparkJobDefinitionAzureResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Debug the spark job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sparkJobDefinitionAzureResource'>
            /// Spark Job Definition resource definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkBatchJob> BeginDebugSparkJobDefinitionAsync(this ISparkJobDefinitionOperations operations, SparkJobDefinitionResource sparkJobDefinitionAzureResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDebugSparkJobDefinitionWithHttpMessagesAsync(sparkJobDefinitionAzureResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists spark job definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SparkJobDefinitionResource> GetSparkJobDefinitionsByWorkspaceNext(this ISparkJobDefinitionOperations operations, string nextPageLink)
            {
                return operations.GetSparkJobDefinitionsByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists spark job definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SparkJobDefinitionResource>> GetSparkJobDefinitionsByWorkspaceNextAsync(this ISparkJobDefinitionOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkJobDefinitionsByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
