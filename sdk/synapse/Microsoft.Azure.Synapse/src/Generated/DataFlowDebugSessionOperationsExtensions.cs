// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataFlowDebugSessionOperations.
    /// </summary>
    public static partial class DataFlowDebugSessionOperationsExtensions
    {
            /// <summary>
            /// Creates a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition
            /// </param>
            public static CreateDataFlowDebugSessionResponse CreateDataFlowDebugSession(this IDataFlowDebugSessionOperations operations, CreateDataFlowDebugSessionRequest request)
            {
                return operations.CreateDataFlowDebugSessionAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateDataFlowDebugSessionResponse> CreateDataFlowDebugSessionAsync(this IDataFlowDebugSessionOperations operations, CreateDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataFlowDebugSessionWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query all active data flow debug sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DataFlowDebugSessionInfo> QueryDataFlowDebugSessionsByWorkspace(this IDataFlowDebugSessionOperations operations)
            {
                return operations.QueryDataFlowDebugSessionsByWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query all active data flow debug sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataFlowDebugSessionInfo>> QueryDataFlowDebugSessionsByWorkspaceAsync(this IDataFlowDebugSessionOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryDataFlowDebugSessionsByWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a data flow into debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition with debug content.
            /// </param>
            public static AddDataFlowToDebugSessionResponse AddDataFlow(this IDataFlowDebugSessionOperations operations, DataFlowDebugPackage request)
            {
                return operations.AddDataFlowAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a data flow into debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition with debug content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddDataFlowToDebugSessionResponse> AddDataFlowAsync(this IDataFlowDebugSessionOperations operations, DataFlowDebugPackage request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDataFlowWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition for deletion
            /// </param>
            public static void DeleteDataFlowDebugSession(this IDataFlowDebugSessionOperations operations, DeleteDataFlowDebugSessionRequest request)
            {
                operations.DeleteDataFlowDebugSessionAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition for deletion
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDataFlowDebugSessionAsync(this IDataFlowDebugSessionOperations operations, DeleteDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDataFlowDebugSessionWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Execute a data flow debug command.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug command definition.
            /// </param>
            public static DataFlowDebugCommandResponse ExecuteCommand(this IDataFlowDebugSessionOperations operations, DataFlowDebugCommandRequest request)
            {
                return operations.ExecuteCommandAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a data flow debug command.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug command definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataFlowDebugCommandResponse> ExecuteCommandAsync(this IDataFlowDebugSessionOperations operations, DataFlowDebugCommandRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteCommandWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition
            /// </param>
            public static CreateDataFlowDebugSessionResponse BeginCreateDataFlowDebugSession(this IDataFlowDebugSessionOperations operations, CreateDataFlowDebugSessionRequest request)
            {
                return operations.BeginCreateDataFlowDebugSessionAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a data flow debug session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug session definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateDataFlowDebugSessionResponse> BeginCreateDataFlowDebugSessionAsync(this IDataFlowDebugSessionOperations operations, CreateDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateDataFlowDebugSessionWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute a data flow debug command.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug command definition.
            /// </param>
            public static DataFlowDebugCommandResponse BeginExecuteCommand(this IDataFlowDebugSessionOperations operations, DataFlowDebugCommandRequest request)
            {
                return operations.BeginExecuteCommandAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a data flow debug command.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Data flow debug command definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataFlowDebugCommandResponse> BeginExecuteCommandAsync(this IDataFlowDebugSessionOperations operations, DataFlowDebugCommandRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginExecuteCommandWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query all active data flow debug sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataFlowDebugSessionInfo> QueryDataFlowDebugSessionsByWorkspaceNext(this IDataFlowDebugSessionOperations operations, string nextPageLink)
            {
                return operations.QueryDataFlowDebugSessionsByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query all active data flow debug sessions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataFlowDebugSessionInfo>> QueryDataFlowDebugSessionsByWorkspaceNextAsync(this IDataFlowDebugSessionOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryDataFlowDebugSessionsByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
