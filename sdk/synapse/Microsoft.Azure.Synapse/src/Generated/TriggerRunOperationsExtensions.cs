// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TriggerRunOperations.
    /// </summary>
    public static partial class TriggerRunOperationsExtensions
    {
            /// <summary>
            /// Rerun single trigger instance by runId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            public static void RerunTriggerInstance(this ITriggerRunOperations operations, string triggerName, string runId)
            {
                operations.RerunTriggerInstanceAsync(triggerName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rerun single trigger instance by runId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RerunTriggerInstanceAsync(this ITriggerRunOperations operations, string triggerName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RerunTriggerInstanceWithHttpMessagesAsync(triggerName, runId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query trigger runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            public static TriggerRunsQueryResponse QueryTriggerRunsByWorkspace(this ITriggerRunOperations operations, RunFilterParameters filterParameters)
            {
                return operations.QueryTriggerRunsByWorkspaceAsync(filterParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query trigger runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerRunsQueryResponse> QueryTriggerRunsByWorkspaceAsync(this ITriggerRunOperations operations, RunFilterParameters filterParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryTriggerRunsByWorkspaceWithHttpMessagesAsync(filterParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
