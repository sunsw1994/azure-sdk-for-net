// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MonitoringOperations.
    /// </summary>
    public static partial class MonitoringOperationsExtensions
    {
            /// <summary>
            /// Get list of spark applications for the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Can provide a guid, which is helpful for debugging and to provide better
            /// customer support
            /// </param>
            public static SparkJobListViewResponse GetSparkJobList(this IMonitoringOperations operations, string apiVersion, string xMsClientRequestId = default(string))
            {
                return operations.GetSparkJobListAsync(apiVersion, xMsClientRequestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of spark applications for the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Can provide a guid, which is helpful for debugging and to provide better
            /// customer support
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SparkJobListViewResponse> GetSparkJobListAsync(this IMonitoringOperations operations, string apiVersion, string xMsClientRequestId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSparkJobListWithHttpMessagesAsync(apiVersion, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get SQL OD/DW Query for the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Can provide a guid, which is helpful for debugging and to provide better
            /// customer support
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            public static SqlQueryStringDataModel GetSqlJobQueryString(this IMonitoringOperations operations, string apiVersion, string xMsClientRequestId = default(string), string filter = default(string), string orderby = default(string), string skip = default(string))
            {
                return operations.GetSqlJobQueryStringAsync(apiVersion, xMsClientRequestId, filter, orderby, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get SQL OD/DW Query for the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Can provide a guid, which is helpful for debugging and to provide better
            /// customer support
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlQueryStringDataModel> GetSqlJobQueryStringAsync(this IMonitoringOperations operations, string apiVersion, string xMsClientRequestId = default(string), string filter = default(string), string orderby = default(string), string skip = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlJobQueryStringWithHttpMessagesAsync(apiVersion, xMsClientRequestId, filter, orderby, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
