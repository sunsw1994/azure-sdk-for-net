// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PipelineRunOperations.
    /// </summary>
    public static partial class PipelineRunOperationsExtensions
    {
            /// <summary>
            /// Query pipeline runs in the workspace based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            public static PipelineRunsQueryResponse QueryPipelineRunsByWorkspace(this IPipelineRunOperations operations, RunFilterParameters filterParameters)
            {
                return operations.QueryPipelineRunsByWorkspaceAsync(filterParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query pipeline runs in the workspace based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineRunsQueryResponse> QueryPipelineRunsByWorkspaceAsync(this IPipelineRunOperations operations, RunFilterParameters filterParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryPipelineRunsByWorkspaceWithHttpMessagesAsync(filterParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            public static PipelineRun GetPipelineRun(this IPipelineRunOperations operations, string runId)
            {
                return operations.GetPipelineRunAsync(runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineRun> GetPipelineRunAsync(this IPipelineRunOperations operations, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineRunWithHttpMessagesAsync(runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineName'>
            /// The pipeline name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the activity runs.
            /// </param>
            public static ActivityRunsQueryResponse QueryActivityRuns(this IPipelineRunOperations operations, string pipelineName, string runId, RunFilterParameters filterParameters)
            {
                return operations.QueryActivityRunsAsync(pipelineName, runId, filterParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineName'>
            /// The pipeline name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the activity runs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityRunsQueryResponse> QueryActivityRunsAsync(this IPipelineRunOperations operations, string pipelineName, string runId, RunFilterParameters filterParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryActivityRunsWithHttpMessagesAsync(pipelineName, runId, filterParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='isRecursive'>
            /// If true, cancel all the Child pipelines that are triggered by the current
            /// pipeline.
            /// </param>
            public static void CancelPipelineRun(this IPipelineRunOperations operations, string runId, bool? isRecursive = default(bool?))
            {
                operations.CancelPipelineRunAsync(runId, isRecursive).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='isRecursive'>
            /// If true, cancel all the Child pipelines that are triggered by the current
            /// pipeline.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelPipelineRunAsync(this IPipelineRunOperations operations, string runId, bool? isRecursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelPipelineRunWithHttpMessagesAsync(runId, isRecursive, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
